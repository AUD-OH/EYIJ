from flask import Flask, render_template, flash,redirect,url_for
from flask import request, jsonify
from flask_sqlalchemy import SQLAlchemy
import os
basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.secret_key ="asd"
app.config['SQLALCHEMY_DATABASE_URI'] = \
    'sqlite:///' + os.path.join(basedir, 'ey_db.db')
db=SQLAlchemy(app)


class Eydb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    uid= db.Column(db.String(80), unique=True, nullable=False)
    upw = db.Column(db.String(100), unique=False, nullable=False)
    nn = db.Column(db.String(80), unique=True, nullable=False)
    uimg = db.Column(db.String(500), unique=False, nullable=False)
    mt= db.Column(db.String(4), unique=False, nullable=False)
    ut= db.Column(db.String(300), unique=False, nullable=False)



#글쓰기 db
class Podb(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    pt = db.Column(db.String(20), unique=False, nullable=False)
    ct = db.Column(db.String(500), unique=False, nullable=False)
    like = db.Column(db.Integer, default=0)


# class Like(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     count = db.Column(db.Integer, nullable=False, default=0)

# @app.route('/like', methods=['POST'])
# def increase_like():
#     like = Like.query.first()  # 현재 좋아요 객체를 가져옴
#     if like:
#             like.count += 1  # 좋아요 수 증가
#     else:
#             like = Like(count=1)  # 좋아요 객체가 없는 경우 생성
#     db.session.add(like)
#     db.session.commit()  # 변경 사항을 데이터베이스에 반영
#     return jsonify({'like_count': like.count})  # 증가된 좋아요 수를 응답

# if __name__ == '__main__':
#     app.run(debug=True)
    
    # 댓글 db 테이블


class Com_t(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    u_coment = db.Column(db.String(200), unique=False, nullable=False)
with app.app_context():
    db.create_all()

# 댓글 생성 클래스
# 괄호 안에있는 주소가 나오면 나를 불러줘 그 후 밑에 있는 함수를 실행 시켜줘
@app.route('/coment_create')
def coment_create():
    # ey_post_con 에있는 데이터 받기
    u_coment_recive = request.args.get("comment")
    # 이거는 저장할 데이터를 변수에 저장하기
    com_t = Com_t(u_coment=u_coment_recive)
    # 변수에 저장한 데이터를 db에 추가
    db.session.add(com_t)
    # 데이터 베이스를 저장해줘
    db.session.commit()
    # 보여줄 화면의 주소값을 리턴해줌
    return redirect(url_for('ey_post_con'))
# 댓글 삭제 클래스
@app.route('/coment_edit/<int:com_t_id>', methods=['POST'])
def coment_edit(com_t_id):
    act = request.form.get('com_b')
    # print(act, com_t_id)
    com_del = Com_t.query.get(com_t_id)
    if com_del:
        db.session.delete(com_del)
        db.session.commit()
    return redirect(url_for('ey_post_con'))

# 댓글 업데이트
@app.route('/coment_update')
def coment_update():
    commenId = request.args.get('commentId')
    content = request.args.get('content')
    # print(commenId, content)
    comment = Com_t.query.get(commenId)
    if commenId:
        comment.u_coment = content
        db.session.commit()
    return redirect(url_for('ey_post_con'))


@app.route('/join')
def ey_join():
    uid_recive=request.args.get("u_id")
    upw_recive=request.args.get("u_pw")
    nn_recive=request.args.get("nn")
    mt_recive=request.args.get("mt")
    ut_recive=request.args.get("ut")
    uimg_recive="asdf"

    eydb=Eydb(uid=uid_recive, upw=upw_recive, nn=nn_recive, mt=mt_recive, ut=ut_recive, uimg=uimg_recive)
    db.session.add(eydb)
    db.session.commit()
    return render_template('ey_in.html')

# 로그인 함수

@app.route('/ey_uid')
def ey_uid():
    u_id=request.args.get("l_id")
    u_pw=request.args.get("l_pw")
    print(u_id,u_pw)
    user =Eydb.query.filter_by(uid=u_id).first() #비교하는코드
    if user:
        if u_pw==user.upw:
            flash('로그인에 성공했습니다!')
            
            return redirect(url_for('home'))
        
    flash("훈희님바보")
    return redirect(url_for('ey_login'))
    # return render_template('/ey_post.html')
@app.route('/')
def home():
    # print(request.args.get("u_id"))
    # print(request.args.get("u_pw"))
    # print(request.args.get("nn"))
    # print(request.args.get("mt"))
    # print(request.args.get("ut"))
    return render_template('eyij.html')


# @app.route('/ey_post')
# def ey_post():
#     return render_template('ey_post.html')

# @app.route('/ey_post', methods=['POST'])
# def like_post(post_id):
#     # 게시물 조회
#     post = Post.query.get_or_404(post_id)
#     # 좋아요 수 증가
#     post.likes += 1
#     db.session.commit()
#     return jsonify({'message': '좋아요가 성공적으로 업데이트되었습니다.', 'likes': post.likes})

# if __name__ == '__main__':
#     app.run(debug=True)

#글쓰기
@app.route('/write-post')
def submit_post():
    pt = request.form.get('title')
    ct = request.form.get('content')
    # like=request.form.get('like')
    return render_template('write-post.html')

# @app.route('/likePost/<int:post_id>',methods=['POST'])
# def likePost(post_id):
#     print(post_id)
    
#     return render_template('ey_post.html')

#글쓰기 저장
@app.route('/cr_post', methods=['POST'])
def cr_post():
    u_pt = request.form.get('title')
    u_ct = request.form.get('content')

    podb = Podb(pt=u_pt, ct=u_ct)
    db.session.add(podb)
    db.session.commit()
    return redirect(url_for('popular_posts'))

@app.route('/ey_post')
def popular_posts():
    print('asd')
    post_list = Podb.query.all()
    print(post_list)
    return render_template('ey_post.html', data=post_list)



# @app.count()
# def count():


# def get_top_3_popular_posts():

# @app.route('/popular_post_user')
# def popular_posts():
#     post_list = Podb.query.all()
#     return render_template('popular_post_user.html', data=post_list)


@app.route('/ey_team')
def ey_team():
    return render_template('ey_team.html')

@app.route('/ey_login')
def ey_login():
    # print(request.args.get("title"))
    return render_template('ey_login.html')

@app.route('/ey_in')
def ey_in():
    return render_template('ey_in.html')

@app.route('/update-post/<int:post_id>', methods=['POST'])
def update_post(post_id):
    post = Podb.query.get_or_404(post_id)
    post.pt = request.form['postTitle']
    post.ct = request.form['postContent']
    db.session.commit()
    return redirect(url_for('popular_posts'))

# 게시물 삭제


@app.route('/delete_post/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    post = Podb.query.get_or_404(post_id)
    db.session.delete(post)
    db.session.commit()
    return redirect(url_for('popular_posts'))


if __name__ == '__main__':
    app.run(debug=True)


